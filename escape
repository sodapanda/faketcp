# github.com/sodapanda/faketcp
./orderQueue.go:22:15: inlining call to list.New
./orderQueue.go:22:15: inlining call to list.(*List).Init
./orderQueue.go:27:28: inlining call to sync.NewCond
./orderQueue.go:28:27: inlining call to sync.NewCond
./utils.go:3:6: can inline getNextID
./packet.go:26:18: inlining call to getNextID
./packet.go:44:22: inlining call to header.IPv4.SetChecksum
./packet.go:44:22: inlining call to binary.bigEndian.PutUint16
./packet.go:70:24: inlining call to header.Checksum
./packet.go:71:23: inlining call to header.TCP.SetChecksum
./packet.go:71:23: inlining call to binary.bigEndian.PutUint16
./packet.go:81:44: inlining call to header.IPv4.SourceAddress
./packet.go:82:49: inlining call to header.IPv4.DestinationAddress
./packet.go:84:28: inlining call to header.IPv4.ID
./packet.go:84:28: inlining call to binary.bigEndian.Uint16
./packet.go:85:40: inlining call to header.TCP.SourcePort
./packet.go:85:40: inlining call to binary.bigEndian.Uint16
./packet.go:86:45: inlining call to header.TCP.DestinationPort
./packet.go:86:45: inlining call to binary.bigEndian.Uint16
./packet.go:87:31: inlining call to header.TCP.Flags
./packet.go:88:31: inlining call to header.TCP.Flags
./packet.go:89:43: inlining call to header.TCP.SequenceNumber
./packet.go:89:43: inlining call to binary.bigEndian.Uint32
./packet.go:90:38: inlining call to header.TCP.AckNumber
./packet.go:90:38: inlining call to binary.bigEndian.Uint32
./client.go:30:56: inlining call to blockingQueues.NewArrayBlockingQueue
./client.go:30:56: inlining call to sync.NewCond
./client.go:30:56: inlining call to sync.NewCond
./client.go:30:56: inlining call to blockingQueues.NewArrayStore
./client.go:35:12: inlining call to fmt.Printf
./client.go:63:13: inlining call to fmt.Println
./client.go:74:13: inlining call to fmt.Println
./pool.go:24:6: can inline poolGet
./pool.go:28:6: can inline poolPut
./orderQueue.go:35:38: inlining call to time.Time.UnixNano
./orderQueue.go:35:38: inlining call to time.(*Time).unixSec
./orderQueue.go:35:38: inlining call to time.(*Time).sec
./orderQueue.go:35:38: inlining call to time.(*Time).nsec
./orderQueue.go:37:13: inlining call to sync.(*Mutex).Lock
./orderQueue.go:38:20: inlining call to list.(*List).Len
./orderQueue.go:43:19: inlining call to list.(*List).Len
./orderQueue.go:47:16: inlining call to sync.(*Mutex).Unlock
./orderQueue.go:53:27: inlining call to list.(*List).Front
./orderQueue.go:53:51: inlining call to list.(*Element).Next
./orderQueue.go:56:15: inlining call to fmt.Println
./orderQueue.go:61:11: inlining call to poolPut
./orderQueue.go:62:17: inlining call to sync.(*Mutex).Unlock
./orderQueue.go:70:27: inlining call to list.(*List).Front
./orderQueue.go:70:51: inlining call to list.(*Element).Next
./orderQueue.go:78:26: inlining call to list.(*List).InsertBefore
./orderQueue.go:78:26: inlining call to list.(*List).insertValue
./orderQueue.go:78:26: inlining call to list.(*List).insert
./orderQueue.go:85:15: inlining call to sync.(*Mutex).Unlock
./client.go:78:13: inlining call to fmt.Println
./client.go:81:18: inlining call to poolGet
./client.go:84:67: inlining call to header.IPv4.ID
./client.go:84:67: inlining call to binary.bigEndian.Uint16
./orderQueue.go:90:13: inlining call to sync.(*Mutex).Lock
./orderQueue.go:91:20: inlining call to list.(*List).Len
./orderQueue.go:95:28: inlining call to list.(*List).Front
./orderQueue.go:99:30: inlining call to time.Time.UnixNano
./orderQueue.go:99:30: inlining call to time.(*Time).unixSec
./orderQueue.go:99:30: inlining call to time.(*Time).sec
./orderQueue.go:99:30: inlining call to time.(*Time).nsec
./orderQueue.go:103:20: inlining call to list.(*List).Remove
./orderQueue.go:103:20: inlining call to list.(*List).remove
./orderQueue.go:104:16: inlining call to sync.(*Mutex).Unlock
./orderQueue.go:110:15: inlining call to sync.(*Mutex).Unlock
./orderQueue.go:114:13: inlining call to sync.(*Mutex).Lock
./orderQueue.go:115:19: inlining call to list.(*List).Remove
./orderQueue.go:115:19: inlining call to list.(*List).remove
./orderQueue.go:116:15: inlining call to sync.(*Mutex).Unlock
./client.go:96:19: inlining call to strings.(*Builder).WriteString
./client.go:96:19: inlining call to strings.(*Builder).copyCheck
./client.go:96:19: inlining call to strings.noescape
./client.go:101:10: inlining call to poolPut
./client.go:106:13: inlining call to fmt.Println
./client.go:112:12: inlining call to fmt.Printf
./client.go:116:18: inlining call to poolGet
./client.go:127:11: inlining call to poolPut
./client.go:158:10: inlining call to poolPut
./client.go:161:15: inlining call to fmt.Println
./server.go:26:56: inlining call to blockingQueues.NewArrayBlockingQueue
./server.go:26:56: inlining call to sync.NewCond
./server.go:26:56: inlining call to sync.NewCond
./server.go:26:56: inlining call to blockingQueues.NewArrayStore
./server.go:28:13: inlining call to fmt.Println
./server.go:37:14: inlining call to fmt.Println
./server.go:46:13: inlining call to fmt.Println
./server.go:71:14: inlining call to fmt.Println
./server.go:74:13: inlining call to fmt.Println
./server.go:80:13: inlining call to fmt.Println
./server.go:100:13: inlining call to fmt.Println
./server.go:109:18: inlining call to poolGet
./server.go:130:21: inlining call to poolGet
./server.go:133:42: inlining call to time.Time.UnixNano
./server.go:133:42: inlining call to time.(*Time).unixSec
./server.go:133:42: inlining call to time.(*Time).sec
./server.go:133:42: inlining call to time.(*Time).nsec
./server.go:147:11: inlining call to poolPut
./server.go:181:19: inlining call to strings.(*Builder).WriteString
./server.go:181:19: inlining call to strings.(*Builder).copyCheck
./server.go:181:19: inlining call to strings.noescape
./server.go:186:10: inlining call to poolPut
./server.go:189:15: inlining call to fmt.Println
./reduntQueue.go:11:6: can inline reduntInit
./reduntQueue.go:12:55: inlining call to blockingQueues.NewArrayBlockingQueue
./reduntQueue.go:12:55: inlining call to sync.NewCond
./reduntQueue.go:12:55: inlining call to sync.NewCond
./reduntQueue.go:12:55: inlining call to blockingQueues.NewArrayStore
./reduntQueue.go:23:30: inlining call to time.Time.UnixNano
./reduntQueue.go:23:30: inlining call to time.(*Time).unixSec
./reduntQueue.go:23:30: inlining call to time.(*Time).sec
./reduntQueue.go:23:30: inlining call to time.(*Time).nsec
./server.go:155:12: inlining call to reduntInit
./server.go:155:12: inlining call to blockingQueues.NewArrayBlockingQueue
./server.go:155:12: inlining call to sync.NewCond
./server.go:155:12: inlining call to sync.NewCond
./server.go:155:12: inlining call to blockingQueues.NewArrayStore
./server.go:162:10: inlining call to poolPut
./server.go:165:15: inlining call to fmt.Println
./main.go:141:51: inlining call to list.(*List).Len
./main.go:139:14: inlining call to fmt.Println
./main.go:37:23: inlining call to flag.Bool
./main.go:38:32: inlining call to flag.String
./main.go:39:31: inlining call to flag.Int
./main.go:40:23: inlining call to flag.Int
./main.go:41:21: inlining call to flag.Int
./main.go:42:22: inlining call to flag.Bool
./main.go:43:12: inlining call to flag.Parse
./main.go:68:14: inlining call to fmt.Println
./main.go:69:18: inlining call to bufio.NewReader
./main.go:69:18: inlining call to bufio.NewReaderSize
./main.go:69:18: inlining call to bufio.(*Reader).reset
./main.go:69:39: inlining call to bufio.(*Reader).ReadString
./main.go:79:27: inlining call to bufio.NewReader
./main.go:79:27: inlining call to bufio.NewReaderSize
./main.go:79:27: inlining call to bufio.(*Reader).reset
./main.go:80:19: inlining call to bufio.(*Reader).ReadString
./main.go:92:14: inlining call to fmt.Println
./main.go:93:14: inlining call to fmt.Println
./main.go:94:14: inlining call to fmt.Println
./main.go:96:56: inlining call to strings.(*Builder).String
./main.go:98:29: inlining call to os.Create
./main.go:99:23: inlining call to http.Get
./main.go:100:11: inlining call to io.Copy
./main.go:103:14: inlining call to fmt.Printf
./main.go:83:14: inlining call to fmt.Println
./main.go:84:14: inlining call to fmt.Println
./main.go:85:14: inlining call to fmt.Println
./main.go:86:14: inlining call to fmt.Println
./main.go:87:14: inlining call to fmt.Println
./main.go:89:56: inlining call to strings.(*Builder).String
./orderQueue.go:123:13: inlining call to sync.(*Mutex).Lock
./orderQueue.go:124:23: inlining call to list.(*List).Len
./orderQueue.go:125:15: inlining call to sync.(*Mutex).Unlock
./pool.go:17:7: can inline glob..func1
./orderQueue.go:22:15: new(list.List) escapes to heap
./orderQueue.go:23:11: new(OrderQueue) escapes to heap
./orderQueue.go:26:15: new(sync.Mutex) escapes to heap
./orderQueue.go:27:28: &sync.Cond literal escapes to heap
./orderQueue.go:28:27: &sync.Cond literal escapes to heap
./packet.go:25:18: packet does not escape
./packet.go:25:33: fPacket does not escape
./packet.go:40:34: tcpip.Address(fPacket.srcIP) does not escape
./packet.go:41:34: tcpip.Address(fPacket.dstIP) does not escape
./packet.go:67:16: tcpip.Address(fPacket.srcIP) does not escape
./packet.go:68:16: tcpip.Address(fPacket.dstIP) does not escape
./main.go:122:17: leaking param: err
./main.go:124:14: ... argument does not escape
./main.go:124:56: err.Error() escapes to heap
./packet.go:77:15: leaking param: data
./packet.go:77:28: fPacket does not escape
./packet.go:81:44: tcpip.Address(header.b[int(12):int(16)]) does not escape
./packet.go:82:49: tcpip.Address(header.b[int(16):int(20)]) does not escape
./client.go:28:16: leaking param content: tun
./client.go:30:56: new(sync.Mutex) escapes to heap
./client.go:30:56: &blockingQueues.BlockingQueue literal escapes to heap
./client.go:30:56: &sync.Cond literal escapes to heap
./client.go:30:56: &sync.Cond literal escapes to heap
./client.go:30:56: &blockingQueues.ArrayStore literal escapes to heap
./client.go:30:56: make([]interface {}, blockingQueues.size) escapes to heap
./client.go:35:13: dstIP escapes to heap
./client.go:35:13: clientTunDstPort escapes to heap
./client.go:35:12: []interface {} literal does not escape
./client.go:37:16: make([]byte, 40) escapes to heap
./client.go:57:29: make([]byte, 4) escapes to heap
./client.go:58:29: make([]byte, 4) escapes to heap
./client.go:63:14: "client got syn+ack" escapes to heap
./client.go:63:13: []interface {} literal does not escape
./client.go:74:14: "client send ack" escapes to heap
./client.go:74:13: []interface {} literal does not escape
./orderQueue.go:34:7: leaking param content: q
./orderQueue.go:34:26: leaking param: item
./orderQueue.go:56:16: "same address" escapes to heap
./orderQueue.go:56:15: []interface {} literal does not escape
./orderQueue.go:78:26: &list.Element literal escapes to heap
./client.go:77:23: leaking param content: tun
./client.go:78:14: "client tun" escapes to heap
./client.go:78:13: []interface {} literal does not escape
./orderQueue.go:89:7: leaking param content: q
./client.go:96:31: ... argument does not escape
./client.go:96:43: int(cLastRecPacket.ipID) escapes to heap
./client.go:105:26: socketListenPort does not escape
./client.go:106:14: "client socket to queue" escapes to heap
./client.go:106:13: []interface {} literal does not escape
./client.go:108:48: ":" + socketListenPort escapes to heap
./client.go:112:12: []interface {} literal does not escape
./client.go:132:23: leaking param content: tun
./client.go:132:45: serverIP does not escape
./client.go:139:25: net.IP literal does not escape
./client.go:161:16: "client tun write not full" escapes to heap
./client.go:161:15: []interface {} literal does not escape
./main.go:108:16: name does not escape
./main.go:116:12: ... argument does not escape
./server.go:25:22: leaking param content: tun
./server.go:26:56: new(sync.Mutex) escapes to heap
./server.go:26:56: &blockingQueues.BlockingQueue literal escapes to heap
./server.go:26:56: &sync.Cond literal escapes to heap
./server.go:26:56: &sync.Cond literal escapes to heap
./server.go:26:56: &blockingQueues.ArrayStore literal escapes to heap
./server.go:26:56: make([]interface {}, blockingQueues.size) escapes to heap
./server.go:28:14: "server waiting for SYN" escapes to heap
./server.go:28:13: []interface {} literal does not escape
./server.go:29:16: make([]byte, 40) escapes to heap
./server.go:33:22: make([]byte, 4) does not escape
./server.go:34:22: make([]byte, 4) does not escape
./server.go:37:15: "server get first packet not SYN!" escapes to heap
./server.go:37:14: []interface {} literal does not escape
./server.go:40:15: make([]byte, 4) escapes to heap
./server.go:46:14: "server send syn+ack" escapes to heap
./server.go:46:13: []interface {} literal does not escape
./server.go:49:22: make([]byte, 4) does not escape
./server.go:67:28: make([]byte, 4) escapes to heap
./server.go:68:28: make([]byte, 4) escapes to heap
./server.go:71:15: "server get not ack" escapes to heap
./server.go:71:14: []interface {} literal does not escape
./server.go:74:14: "server got ack hand shake done" escapes to heap
./server.go:74:13: []interface {} literal does not escape
./server.go:79:24: leaking param content: tun
./server.go:80:14: "server tun to socket" escapes to heap
./server.go:80:13: []interface {} literal does not escape
./server.go:81:16: make([]byte, 2000) escapes to heap
./reduntQueue.go:15:16: leaking param: item
./server.go:99:26: leaking param: serverSendto
./server.go:100:14: "server socket to queue" escapes to heap
./server.go:100:13: []interface {} literal does not escape
./server.go:118:19: net.IP literal does not escape
./server.go:170:23: leaking param content: tun
./server.go:172:24: make([]byte, 4) does not escape
./server.go:173:24: make([]byte, 4) does not escape
./server.go:181:31: ... argument does not escape
./server.go:181:43: int(logPacket.ipID) escapes to heap
./server.go:189:16: "server tun write not full" escapes to heap
./server.go:189:15: []interface {} literal does not escape
./server.go:154:19: leaking param content: tun
./server.go:155:12: new(sync.Mutex) escapes to heap
./server.go:155:12: &blockingQueues.BlockingQueue literal escapes to heap
./server.go:155:12: &sync.Cond literal escapes to heap
./server.go:155:12: &sync.Cond literal escapes to heap
./server.go:155:12: &blockingQueues.ArrayStore literal escapes to heap
./server.go:155:12: make([]interface {}, blockingQueues.size) escapes to heap
./server.go:165:16: "server tun write not full" escapes to heap
./server.go:165:15: []interface {} literal does not escape
./main.go:139:15: "空队放 " escapes to heap
./main.go:139:42: emptyPutCount - lep escapes to heap
./main.go:140:4: " 冗余包 " escapes to heap
./main.go:140:30: reduntCount - lrc escapes to heap
./main.go:141:4: " 队长 " escapes to heap
./main.go:141:51: clientTunToSocketQueue.dataList.Len() escapes to heap
./main.go:142:4: " 重排 " escapes to heap
./main.go:142:28: reorderCount - lreorderCount escapes to heap
./main.go:143:4: " 放队尾 " escapes to heap
./main.go:143:32: pushbackCount - lpushbackCount escapes to heap
./main.go:144:4: " 超时包 " escapes to heap
./main.go:144:31: timeoutCount - ltimeoutCount escapes to heap
./main.go:145:4: " 发上层 " escapes to heap
./main.go:145:37: clientReceiveCount - lclientReceiveCount escapes to heap
./main.go:146:4: " poolE " escapes to heap
./main.go:146:4: poolWrongFlag escapes to heap
./main.go:139:14: []interface {} literal does not escape
./main.go:54:21: ... argument does not escape
./main.go:56:20: ... argument does not escape
./main.go:68:15: "server reader?" escapes to heap
./main.go:68:14: []interface {} literal does not escape
./main.go:69:18: new(bufio.Reader) does not escape
./main.go:69:18: make([]byte, bufio.size) escapes to heap
./main.go:69:39: string(bufio.bytes·5) does not escape
./main.go:79:27: new(bufio.Reader) does not escape
./main.go:79:27: make([]byte, bufio.size) escapes to heap
./main.go:80:19: string(bufio.bytes·5) does not escape
./main.go:83:15: "server drop " escapes to heap
./main.go:83:15: serverDrop escapes to heap
./main.go:83:14: []interface {} literal does not escape
./main.go:84:15: "server send " escapes to heap
./main.go:84:15: serverSendCount escapes to heap
./main.go:84:14: []interface {} literal does not escape
./main.go:85:15: "server recieve count " escapes to heap
./main.go:85:15: serverReceiveCount escapes to heap
./main.go:85:14: []interface {} literal does not escape
./main.go:86:15: "serverTunToSocketReadMaxLen " escapes to heap
./main.go:86:15: serverTunToSocketReadMaxLen escapes to heap
./main.go:86:14: []interface {} literal does not escape
./main.go:87:15: "serverSocketReadMaxLen" escapes to heap
./main.go:87:15: serverSocketReadMaxLen escapes to heap
./main.go:87:14: []interface {} literal does not escape
./main.go:89:45: ([]byte)(string(~R0)) does not escape
./main.go:92:15: "client drop " escapes to heap
./main.go:92:15: clientDrop escapes to heap
./main.go:92:14: []interface {} literal does not escape
./main.go:93:15: "client send count " escapes to heap
./main.go:93:15: clientSendCount escapes to heap
./main.go:93:14: []interface {} literal does not escape
./main.go:94:15: "client receive count " escapes to heap
./main.go:94:15: clientReceiveCount escapes to heap
./main.go:94:14: []interface {} literal does not escape
./main.go:96:45: ([]byte)(string(~R0)) does not escape
./main.go:102:29: ... argument does not escape
./main.go:103:15: outPut escapes to heap
./main.go:103:14: []interface {} literal does not escape
./orderQueue.go:122:7: leaking param content: q
./pool.go:28:14: leaking param: item
./reduntQueue.go:12:55: new(sync.Mutex) escapes to heap
./reduntQueue.go:12:55: &blockingQueues.BlockingQueue literal escapes to heap
./reduntQueue.go:12:55: &sync.Cond literal escapes to heap
./reduntQueue.go:12:55: &sync.Cond literal escapes to heap
./reduntQueue.go:12:55: &blockingQueues.ArrayStore literal escapes to heap
./reduntQueue.go:12:55: make([]interface {}, blockingQueues.size) escapes to heap
./pool.go:18:3: moved to heap: buffer
./pool.go:19:21: make([]byte, 2000) escapes to heap